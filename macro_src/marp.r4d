% mod
$define(mod_marp=)

% Environment variables 
$static(v_basis_height,500)
$static(v_font_default,24)
$static(v_thead_default,18)
$static(v_tbody_default,14)
$static(v_font_family,sans-serif)
$static(v_table_header_bg,#006DCC)
$static(v_table_header_fg,white)

% Macros 

% Substitue class name with marp compatible class form 
% white space between _class: and $1 is necessary 
$define(m_class,a_class=<!-- _class: $a_class() -->)

% Convert all missing markdown syntax into html tag
% This is a custom made basic macro fed by executor of gdengine
% Check src/renderer/marp.rs for implementation
$define(m_sanitize,a_content=$mdtohtml($a_content()))

% Subsitue with markdown compatible image form 
% Convert contents into single lined html
% This was intended for multi line support in csv table
% I thought this macro was necessry but is it now?
$define(m_newline_to_br,a_scell=$regex($a_scell(),$nl(),<br>))

% ==========
% User interface macros 

% Basic syntax macros
% Headers
$define(h1,a_content=# $a_content())
$define(h2,a_content=## $a_content())
$define(h3,a_content=### $a_content())
$define(h4,a_content=#### $a_content())
$define(h5,a_content=##### $a_content())

% Bold 
$define(b,a_content=<span style="font-weight:bold;">$a_content()</span>)

% Italic 
$define(i,a_content=<span style="font-style:italic;">$a_content()</span>)

% ItalicBold 
$define(bi,a_content=<span style="font-style:italic;font-weight:bold;">$a_content()</span>)

% Strike through
$define(st,a_content=<span style="text-decoration:line-through;">$a_content()</span>)

% Underline
$define(ud,a_content=<span style="text-decoration:underline;">$a_content()</span>)

% Indentation
% WARNING : Single spaces between if else bracket end and macro define bracket end
% is necessary, do not erase it.
$define(idt,a_count=$forloop(2,$a_count(),    ))

% Lists
% Unordered List
% Emtpry ul is same with level 1 
$define(ul,a_count=$forloop(2,$a_count(),    )*)

% Ordered list
$define(ol,a_count=$forloop(2,$a_count(),    )1.)

% Paragraph
$define(p,a_content=<p>$mdtohtml($a_content())</p>)

% New page
% Compatible macros
$define(newpage=
---
)

% Non-compatible macros
% New page
$define(np=
=newpage()
)

% New page wich classes
$define(npc,a_classes=
newpage()
$class($a_classes())
)

% Split page
% Marp only split page macro
$define(splitpage=
$newpage()
)

% MACRO >>> Get style files' name and paste the content
% Usage :
% styles(image,layout)
$define(styles,a_styles=<style>
$foreach($a_styles(),
$include($path($env(GDE_MODULE),$:.css)))
</style>
)

% ----
% Multiline support csv table related macros
% Refer macro.md for general usage

% Start table
% Newline is needed because <table> tag should start from the first character
$define(tstart=
$ifdef(TABLE_CONTENT,$undef(TABLE_CONTENT))
$static(TABLE_CONTENT,)
$relay(macro,TABLE_CONTENT)
<table>)

% Set table font size
$define(tfont,a_header_size a_body_size=
<style scoped>
    thead > tr > td { 
        $ifelse(
            $a_header_size() == 0,
            $pipe($v_thead_default()),
            $pipe($a_header_size())
        ) 
        font-size : $-()px;
    }
    :not(thead) > tr > td { 
        $ifelse(
            $a_body_size() == 0,
            $pipe($v_tbody_default()),
            $pipe($a_body_size())
        ) 
        font-size : $-()px;
    }
</style>)

% Set table header
$define(theader,a_content=
<thead>
$foreach($a_content(),    <td>$:</td>)
</thead>
)

% Set table row
% <td> should be in a differnt line from values because mdtohtml can't convert
% inline list
$define(trow,a_content=
<tr>
$foreach($a_content(),$m_sanitize(<td>

$:
</td>
))
</tr>)

% end table
% Newline is needed because <table> tag should start from the first character
$define(tend=
$append(TABLE_CONTENT,</table>)
$halt()
$que($triml($TABLE_CONTENT())))

% URL
$define(url,a_src a_text=[$a_text()]($a_src())) # $2 is alternate text, $1 is image url

% Image substitue macros
$define(image,a_src=
<img src="$a_src()" style="object-fit: scale-down; max-height: 100%;"/>
)

% Make Set img's size with given arguments 
$define(simage,a_src a_max_size=<img src="$a_src()" style="height: $a_max_size(); max-height: 100%; width: auto"/>
)

% MACRO >>> Text macro that also sets font size for the text
% Example :
% text(26, yatti yatta)
$define(text,a_font_size a_content=<div style="font-size : $ifelse($eval($a_font_size() != 0),$a_font_size(),$a_font_size())px;">
$trim($a_content())
</div>
)

% MACRO >>> sdiv macro that makes div a flex display
% Intended for usage with split screen
$define(sdiv,a_content=<div class="fbox">
$trim($m_sanitize($a_content()))
</div>
)

% MACRO >>> sdiv with given font size
$define(fsdiv,a_font_size a_content=<div class="fbox" style="font-size: $a_font_size()px;">
$trim($m_sanitize($a_content()))
</div>
)

% Class related macros

% Macro >>> set table of contents
$define(toc,a_level a_text=$ol($a_level()) $a_text())

% MACRO >>> Set title class into slide and type title, author text at the same time
$define(title,a_title a_subtitle=$m_class(title)
# $a_title()
## $a_subtitle()
)

% MACRO >>> Set any class of given arguments
$define(class,a_class=$m_class($regex($a_class*(),\*,*\, )))

% -----
% Split screen related macros

% MACRO >>> Start left pane
$define(start_pane=$define(SPLIT_CONTENT=)
$relay(macro,SPLIT_CONTENT)
<div class="hcontainer">
<div class="hcont-item">)

% MACRO >>> Start next pane
$define(next_pane=
</div>
<div class="hcont-item">
)

% MACRO >>> End pane
% This ends relaying
$define(end_pane=
$append(SPLIT_CONTENT,</div>$nl()
</div>
)
$halt()
$que($SPLIT_CONTENT()))

$define(start_horizontal=$enl()
$define(HOR_CONTENT=)
$relay(macro,HOR_CONTENT)
<div class="hcontainer">
)

$define(end_horizontal=$enl()
$append(HOR_CONTENT,$nl()</div>
)
$halt()
$que($triml($HOR_CONTENT())))

$define(horizontal_item,a_content=
<div class="hcont-item">
$a_content()
</div>
)

% Center macro
$define(center,a_content=<div class="center-div">
$a_content()
</div>
)

% Colored texts
$define(text_color,a_color a_content=<span style="color:$a_color()">$a_content()</span>)

% Content should not be evalued twice, thus should be escaped
$define(black,a_content=$text_color($COLOR_BLACK(),$a_content*()))
$define(red,a_content=$text_color($COLOR_RED(),$a_content*()))
$define(green,a_content=$text_color($COLOR_GREEN(),$a_content*()))
$define(blue,a_content=$text_color($COLOR_BLUE(),$a_content*()))
$define(yellow,a_content=$text_color($COLOR_YELLOW(),$a_content*()))
$define(magenta,a_content=$text_color($COLOR_MAGENTA(),$a_content*()))
$define(cyan,a_content=$text_color($COLOR_CYAN(),$a_content*()))
$define(white,a_content=$text_color($COLOR_WHITE(),$a_content*()))

% TOC macro
% This simply declares macro
% toc macro should not be nested because it should print literal toc_include
% This behaviour might change according to rad update though
$define(make_toc=
$declare(TOC_LIST)
$pause(true)
$toc_include()
$pause(false)
)

% Escape because everything was processed before
$define(toc_include=
$forline^($TOC_LIST(),$toc($:)
)
$escape())
